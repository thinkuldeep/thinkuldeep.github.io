<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>openthread on Kuldeep Singh</title>
        <link>https://thinkuldeep.com//tags/openthread/</link>
        <description>Recent content in openthread on Kuldeep Singh</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <managingEditor>thinkuldeep@gmail.com (Kuldeep Singh)</managingEditor>
        <webMaster>thinkuldeep@gmail.com (Kuldeep Singh)</webMaster>
        <lastBuildDate>Sat, 15 Feb 2025 11:58:08 -0400</lastBuildDate><atom:link href="http://localhost:1313/tags/openthread/index.xml" rel="self" type="application/rss+xml" />
        <item>
            <title>Implementing a TCP Client in nRF Connect</title>
            <link>https://thinkuldeep.com//post/iot-thread-tcp-client-implementation/</link>
            <pubDate>Sat, 15 Feb 2025 11:58:08 -0400</pubDate>
            <author>thinkuldeep@gmail.com (Kuldeep Singh)</author>
            <guid>https://thinkuldeep.com//post/iot-thread-tcp-client-implementation/</guid>
            <description>In a previous article, we implemented a Joiner that is programmatically provisioned by a Commissioner node to join a Thread network. Once an IoT device is part of the Thread network, the next step is to enable communication with other Thread nodes or external hosts. We previously discussed and tested UDP-based communication in Connecting Thread devices to Internet. In this article, we explore a similar approach with TCP OT CLI, and here we are implementing a custom TCP client that sends data to a TCP server programmatically.</description>
        </item>
        
        <item>
            <title>nRF Connect SDK Advanced Practices</title>
            <link>https://thinkuldeep.com//post/iot-nrf-connect-sdk-advanced/</link>
            <pubDate>Sun, 09 Feb 2025 10:58:08 -0400</pubDate>
            <author>thinkuldeep@gmail.com (Kuldeep Singh)</author>
            <guid>https://thinkuldeep.com//post/iot-nrf-connect-sdk-advanced/</guid>
            <description>In our previous article, we provided a brief overview of the nRF Connect SDK and demonstrated how to build a simple application. This article explores advanced practices for working with the nRF Connect SDK, focusing on Zephyr OS internals, including timers, schedulers, bootloading, DFU, and FOTA concepts. It builds on our previous introduction to the nRF Connect SDK and provides insights into developing multi-threaded firmware, troubleshooting, and deploying firmware over the air (OTA).</description>
        </item>
        
        <item>
            <title>Implementing a Joiner in nRF Connect SDK</title>
            <link>https://thinkuldeep.com//post/iot-thread-joiner-implementation/</link>
            <pubDate>Sat, 08 Feb 2025 11:58:08 -0400</pubDate>
            <author>thinkuldeep@gmail.com (Kuldeep Singh)</author>
            <guid>https://thinkuldeep.com//post/iot-thread-joiner-implementation/</guid>
            <description>In a previous article, we explored how a Commissioner node provisions a Joiner in a Thread network using OpenThread&amp;rsquo;s default firmware. However, in real-world applications, custom firmware logic is often required, along with programmatic control over the commissioning process. In this article, we will implement a Joiner using the nRF Connect SDK, following these four key steps.
Joiner in Action The Joiner process involves the following steps:
 Enable Thread – Ensure that the Thread network and IPv6 are enabled.</description>
        </item>
        
        <item>
            <title>Simplifying Thread Network Provisioning with Joiner and Commissioner</title>
            <link>https://thinkuldeep.com//post/iot-thread-network-provisioning/</link>
            <pubDate>Sat, 08 Feb 2025 10:58:08 -0400</pubDate>
            <author>thinkuldeep@gmail.com (Kuldeep Singh)</author>
            <guid>https://thinkuldeep.com//post/iot-thread-network-provisioning/</guid>
            <description>In previous articles, we explored the Thread protocol and connected Thread devices to the internet using a Border Router. We joined the Thread network by manually configuring each node with a full dataset containing network credentials such as the PAN ID, Network Key, Network Name, and more (refer to Step 6.1: Access Network Credentials). While this method works, it becomes impractical when provisioning hundreds of Thread devices in real-world scenarios.</description>
        </item>
        
        <item>
            <title>Getting Started with nRF Connect SDK</title>
            <link>https://thinkuldeep.com//post/iot-nrf-connect-sdk/</link>
            <pubDate>Wed, 08 Jan 2025 10:58:08 -0400</pubDate>
            <author>thinkuldeep@gmail.com (Kuldeep Singh)</author>
            <guid>https://thinkuldeep.com//post/iot-nrf-connect-sdk/</guid>
            <description>In the previous article, we explored setting up a Thread Network and enabling communication within and outside the network via a Border Router using OpenThread and the nRF Connect SDK. While we covered installing and configuring the SDK during the setup, we didn’t dive into the development process for nRF Connect SDK Apps. Let’s address that now!
What We’ll Cover This article introduces the nRF Connect SDK and walks through building applications with it.</description>
        </item>
        
        <item>
            <title>Connecting Thread Devices to Internet</title>
            <link>https://thinkuldeep.com//post/iot-thread-devices-internet/</link>
            <pubDate>Wed, 01 Jan 2025 10:58:08 -0400</pubDate>
            <author>thinkuldeep@gmail.com (Kuldeep Singh)</author>
            <guid>https://thinkuldeep.com//post/iot-thread-devices-internet/</guid>
            <description>In previous articles, we explored the Thread Network and its protocol, focusing on the formation, functionality, and topology of the network. Thread is a lightweight, low-power communication protocol for IoT devices, operating on IPv6. We discussed its ability to automatically establish a mesh network and maintain connectivity through its robust topology.
We simulated a Thread network using Docker. Now in this article, we’ll create a Thread network between physical devices and connect it to the internet.</description>
        </item>
        
        <item>
            <title>Understanding the Thread Protocol and Network</title>
            <link>https://thinkuldeep.com//post/iot-the-thread-protocol-and-network/</link>
            <pubDate>Sat, 26 Oct 2024 10:58:08 -0400</pubDate>
            <author>thinkuldeep@gmail.com (Kuldeep Singh)</author>
            <guid>https://thinkuldeep.com//post/iot-the-thread-protocol-and-network/</guid>
            <description>In previous articles, we explored MQTT in-depth, even setting up a web-based remote controller that simulated a physical button. We did this in a “Soft IoT” way, avoiding hardware intricacies. However, in IoT, networking between devices plays a crucial role. Not all IoT devices are connected to the Internet or can communicate via MQTT over the internet, as shown in our earlier examples. These devices need a low-latency, low-power network that can auto-discover and manage device communication seamlessly.</description>
        </item>
        
    </channel>
</rss>