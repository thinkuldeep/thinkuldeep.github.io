<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>whatsnew on Kuldeep Singh</title>
    <link>https://thinkuldeep.com/tags/whatsnew/</link>
    <description>Recent content in whatsnew on Kuldeep Singh</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 10 Dec 2014 10:58:08 -0400</lastBuildDate>
    
	<atom:link href="https://thinkuldeep.com/tags/whatsnew/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>HashMap Performance Improvement in Java 8</title>
      <link>https://thinkuldeep.com/post/java8-hashmap-performance-improvement/</link>
      <pubDate>Wed, 10 Dec 2014 10:58:08 -0400</pubDate>
      
      <guid>https://thinkuldeep.com/post/java8-hashmap-performance-improvement/</guid>
      <description>Hash collision degrades the performance of HashMap significantly. Java 8 has introduced a new strategy to deal with hash collisions, thus improving the performance of HashMaps. Considering this improvement in Java 8 for hash collisions, existing applications can expect performance improvements in case they are using HashMaps having large number of elements by simply upgrading to Java 8.
Earlier, when multiple keys ends up in the same bucket, then values along with their keys are placed in a linked list.</description>
    </item>
    
    <item>
      <title>Introduction to Java Lambda Expression</title>
      <link>https://thinkuldeep.com/post/java8-lambda-expression/</link>
      <pubDate>Wed, 10 Dec 2014 10:58:08 -0400</pubDate>
      
      <guid>https://thinkuldeep.com/post/java8-lambda-expression/</guid>
      <description>After Java 8, developers can apply functional programming constructs in a pure Object-Oriented programming language through lambda expressions. Using lambda expression sequential and parallel execution can be achieved by passing behavior into methods. In Java world lambdas can be thought of as an anonymous method with a more compact syntax. Here compact means it is not mandatory to specify access modifiers, return type and parameter types while defining the expression.</description>
    </item>
    
    <item>
      <title>Introduction to Java Stream API</title>
      <link>https://thinkuldeep.com/post/java8-stream-api/</link>
      <pubDate>Mon, 08 Dec 2014 10:58:08 -0400</pubDate>
      
      <guid>https://thinkuldeep.com/post/java8-stream-api/</guid>
      <description>Prior to JDK 8, collections can only be managed through iterators with the use of for, foreach or while loops. It means that we instruct a computer to execute the algorithm steps.
int sum(List&amp;lt;Integer&amp;gt; list) { Iterator&amp;lt;Integer&amp;gt; intIterator = list.iterator(); int sum = 0; while (intIterator.hasNext()) { int number = intIterator.next(); if (number &amp;gt; 5) { sum += number; } } return sum; } The above approach has the following tailbacks:</description>
    </item>
    
  </channel>
</rss>